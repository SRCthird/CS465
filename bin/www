#!/usr/bin/env node

/**
 * Module dependencies.
 */
import 'dotenv/config';
import process from 'process';

import app from '../index.js';
import debugModule from 'debug';
import http from 'http';
import https from 'https';
import fs from 'node:fs';

const debug = debugModule('test:server');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create server.
 */
const CERT = process.env.CERT;
const KEY = process.env.KEY;
const sslOptions = {
  cert: fs.readFileSync(CERT),
  key: fs.readFileSync(KEY),
};

var server = (fs.existsSync(CERT) && fs.existsSync(KEY))?
  https.createServer(sslOptions, app):
  http.createServer(app);

/**
 *  Lists all available endpoints on launch, thought it would look nice :)
 */ 
const printRoutes = (app) => {
  const routes = [];

  // ANSI color codes
  const color = {
    reset: '\x1b[0m',
    green: '\x1b[32m',
    blue: '\x1b[34m',
    yellow: '\x1b[33m',
    bold: '\x1b[1m',
  };

  const getPath = (regex) => {
    return regex.toString()
      .replace('/^', '')
      .replace('\\/?(?=\\/|$)/i', '')
      .replace('/i', '')
      .replace('/$', '')
      .replace('?', '')
      .replace(/\\\//g, '/')
      .replace(/\$$/, '');
  };

  const joinPaths = (prefix, path) => {
    return `${prefix}/${path}`.replace(/\/+/g, '/');
  };

  const processStack = (stack, prefix = '') => {
    stack.forEach((middleware) => {
      if (middleware.route) {
        const methods = Object.keys(middleware.route.methods)
          .map(method => `${color.green}${method.toUpperCase()}${color.reset}`)
          .join(', ');
        const path = `${color.blue}${joinPaths(prefix, middleware.route.path)}${color.reset}`;
        routes.push(`${methods.padEnd(20)} ${path}`);
      } else if (middleware.name === 'router' && middleware.handle.stack) {
        const path = middleware.regexp && middleware.regexp.source !== '^\\/?$'
          ? getPath(middleware.regexp)
          : '';
        processStack(middleware.handle.stack, joinPaths(prefix, path));
      }
    });
  };

  processStack(app._router.stack);

  console.log(`${color.bold}${color.yellow}\nAvailable Endpoints:\n${color.reset}`);
  routes.forEach(route => console.log(route));
  console.log();
};

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port, () => {
  console.log(`Server running on port: ${port}`);
  printRoutes(app)
});
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
